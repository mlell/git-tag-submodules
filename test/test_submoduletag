#!/usr/bin/env bash

# Set up a test repository and run tests

set -ue -o pipefail

thisdir="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
cd "$thisdir"
# Make sure tag-submodule is in PATH
export PATH="$(readlink -f "${thisdir}/.."):${PATH}"

# Usage: assert "Test message" [ "$(command)" = "expected output" ]
# ... or any other bash command instead of [ ... ] that returns an exit code
# of zero on success and non-zero on failure
assert(){
    testmsg="$1"
    shift
    # Read code to test from STDIN
    if bash -u -e -o pipefail 2>&1; then
      printf "TEST OK: %s\n" "$testmsg"
    else
      printf "\n+++ TEST FAILED +++ %s\n" "$testmsg"
      return 1
    fi
}




cd parent01 

# Create different types of tags
git tag tag_lw
git tag -a -m "Annotated tag" tag_ann
git tag -s -m "Signed tag" tag_sgn
git tag -m "Signed tag" tag_sgn2

# Use the pattern 'if [ "x$(<command>)" = "x<result>" ]' to avoid a bash error about an 
# unary operator if one of ... is empty

# Test that lightweight tag is copied
tag-submodule tag_lw
assert "Can copy lightweight tag" <<EOF
  [ "x$(git -C child cat-file -t tag_lw)" = "xcommit" ]
EOF

# Test that annotated tag is copied
tag-submodule tag_ann
assert "Can copy annotated tag" <<EOF
  [ "x$(git -C child cat-file -t tag_ann)" = "xtag" ]
EOF


# Test that signed tag is copied
tag-submodule tag_sgn
assert "Can copy signed tag" <<EOF
  [ "x$(git -C child cat-file -t tag_sgn)" = "xtag" ]
EOF

assert "Strips signature" <<EOF 
  [ "x$(git -C child cat-file -p tag_sgn | grep -- "-----BEGIN PGP SIGNATURE-----")" = "x" ]
EOF

# Test signing of copied tags
tag-submodule -s tag_sgn2
assert "Tag signing works" <<EOF
  [ ! "x$(git -C child cat-file -p tag_sgn2 | grep -- "-----BEGIN PGP SIGNATURE-----")" = "x" ]
EOF

# Test that the tag is skipped if user requests
git -C child commit --allow-empty -m "One more commit to test skipping/renaming of tags"
git add . && git commit -m "Update submodule"

assert "--skip-existing skips if submodule tag hash is same" <<'EOF'
  x="$(tag-submodule --skip-existing tag_lw 2>&1 || : )"
  if [[ $x =~ "Skipping tag"  ]]; 
  then exit 0; else printf "ERROR output:\n%s" "$x";exit 1; fi
EOF

git tag -f tag_ann # move the annotated tag to current commit to test ...
# ... renaming/skipping of existing tags

assert "--skip-existing fails if submodule tag hash is different" <<'EOF'
  x="$(tag-submodule --skip-existing tag_ann 2>&1 || : )"
  if [[ $x =~ "Tag already exists"  ]]; 
  then exit 0; else printf "ERROR output:\n%s" "$x";exit 1; fi
EOF

# creates tag_ann_2 in child
assert "--rename-existing renames tag if it exists already" <<'EOF'
  x="$(tag-submodule --rename-existing tag_ann 2>&1 || : )"
  if [[ $x =~ "Renaming tag to 'tag_ann_2'"  ]]; 
  then exit 0; else printf "ERROR output:\n%s" "$x";exit 1; fi
EOF

assert "--rename-existing --skip-existing skips renamed tag if it exists already" <<'EOF'
  x="$(tag-submodule --rename-existing tag_ann 2>&1 || : )"
  if [[ $x =~ Skipping\ tag.*already\ exists.*tag_ann_2  ]]; 
  then exit 0; else printf "ERROR output:\n%s" "$x";exit 1; fi
EOF

assert "When repeating --rename-existing --skip-existing, new new tags are created" <<'EOF'
  # Requires test "--rename-existing --skip-existing skips renamed tag if it exists already" to have just run
  x="$(tag-submodule --rename-existing --skip-existing tag_ann 2>&1 || : )"
  if [[ ! $x =~ "Renaming tag 'tag_ann'"  ]]; 
  then exit 0; else printf "ERROR output:\n%s" "$x";exit 1; fi
EOF
# Tear down
cd "$thisdir"
rm -rf parent01

echo "All tests passed!"
