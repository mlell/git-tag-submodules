#!/usr/bin/env bash

# Set up a test repository and run tests

set -ue -o pipefail

thisdir="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
cd "$thisdir"
export PATH="$(readlink -f "${thisdir}/.."):${PATH}"

# Usage: assert "Test message" [ "$(command)" = "expected output" ]
# ... or any other bash command instead of [ ... ] that returns an exit code
# of zero on success and non-zero on failure
assert(){
    testmsg="$1"
    shift
    if "$@"; then
      echo -n "."
    else
      printf "\n+++ TEST FAILED +++ %s" "$testmsg"
      return 1
    fi
}




cd parent01 

# Create different types of tags
git tag tag_lw
git tag -a -m "Annotated tag" tag_ann
git tag -s -m "Signed tag" tag_sgn
git tag -m "Signed tag" tag_sgn2

# Use the pattern 'if [ "x$(<command>)" = "x<result>" ]' to avoid a bash error about an 
# unary operator if one of ... is empty

# Test that lightweight tag is copied
tag-submodule tag_lw
assert "Can copy lightweight tag" [ "x$(git -C child cat-file -t tag_lw)" = "xcommit" ]

# Test that annotated tag is copied
tag-submodule tag_ann
assert "Can copy annotated tag" [ "x$(git -C child cat-file -t tag_ann)" = "xtag" ]


# Test that signed tag is copied
tag-submodule tag_sgn
assert "Can copy signed tag" [ "x$(git -C child cat-file -t tag_sgn)" = "xtag" ]
assert "Strips signature" [ "x$(git -C child cat-file -p tag_sgn | grep -- "-----BEGIN PGP SIGNATURE-----")" = "x" ]

# Test signing of copied tags
tag-submodule -s tag_sgn2
assert "Tag signing works" [ ! "x$(git -C child cat-file -p tag_sgn2 | grep -- "-----BEGIN PGP SIGNATURE-----")" = "x" ]


# Tear down
cd "$thisdir"
rm -rf parent01 gpg

echo "All tests passed!"
